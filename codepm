#!/usr/bin/env bash

Green="\e[32m"
Yellow="\e[33m"
Blue="\e[34m"
Magenta="\e[35m"
RESET="\e[0m"

TARGET=
API_URL="https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery"
VERSION="1.0.0"
BASE_PATH="$HOME/.codepm"
PROFILES_PATH="$BASE_PATH/profiles"
CACHE_PATH="$BASE_PATH/cache"
CONFIG_PATH="$BASE_PATH/settings.json"
CATEGORIES=
BASE_EXTENSIONS=
BASE_PROJECT_EXTENSIONS=

usage() {
  echo -e "\
Visual Studio Code Profile Manager $Yellow$VERSION$RESET

Usage: ${Green}codepm$RESET ${Yellow}[options]$RESET ${Yellow}[command]$RESET ${Yellow}[options]$RESET $Magenta<path>$RESET

${Yellow}Commands:$RESET
  ${Blue}n  new$RESET          Create a new profile
  ${Blue}r remove$RESET        Remove a profile
  ${Blue}l list$RESET          List all profiles
  ${Blue}s setup$RESET         Set default configuration (if not exists) and install dependencies
  ${Blue}c category$RESET      Create, update and delete categories
  ${Blue}cc clear-cache$RESET  Clear ${Green}codepm$RESET cache
  ${Blue}ccf clear-cache-full  Clear full ${Green}codepm$RESET cache
  ${Blue}i install$RESET       Install codepm
  ${Blue}ui uninstall          Uninstall codepm

${Yellow}Options:$RESET
  -c --category   Category of the profile
  -n --name       Name of the profile
  -p --project    Open editor in project mode
  -v --version    Print version
  -h --help       Print usage.


$(new_usage)


$(remove_usage)


$(list_usage)


$(category_usage)\
"
}

new_usage() {
  echo -e "\
${Blue}new$RESET Usage: ${Green}codepm$RESET ${Blue}new$RESET ${Yellow}[options]$RESET $Magenta<name>$RESET
  
${Blue}new$RESET ${Yellow}Options:$RESET
  -c --category   Category of the profile
  -h --help       Print ${Blue}new$RESET usage\
"
}

remove_usage() {
  echo -e "\
${Blue}remove$RESET Usage: ${Green}codepm$RESET ${Blue}remove$RESET ${Yellow}[options]$RESET $Magenta<name>$RESET
  
${Blue}remove$RESET ${Yellow}Options:$RESET
  -c --category   Category of the profile
  -h --help       Print ${Blue}remove$RESET usage\
"
}

list_usage() {
  echo -e "\
${Blue}list$RESET Usage: ${Green}codepm$RESET ${Blue}list$RESET ${Yellow}[options]$RESET $Magenta<name>$RESET
  
${Blue}list$RESET ${Yellow}Options:$RESET
  -c --category   Category of the profile
  -h --help       Print ${Blue}list$RESET usage\
"
}

category_usage() {
  echo -e "\
${Blue}category$RESET Usage: ${Green}codepm$RESET ${Blue}category$RESET ${Yellow}[options]$RESET ${Yellow}[command]$RESET
  
${Yellow}${Blue}category$RESET Commands:$RESET
  ${Blue}n new$RESET           Create a new category
  ${Blue}u update$RESET        Update a category
  ${Blue}r remove$RESET        Remove a category
  ${Blue}l list$RESET          List all categories

${Blue}category$RESET ${Yellow}Options:$RESET
  -h --help       Print ${Blue}category$RESET usage\
"
}

get_extensions() {
  curl -fsd "$1" -L "$API_URL" -H 'Content-Type: application/json' -H 'Accept: application/json;api-version=3.0-preview.1'
}

code() {
  local PPATH="$PROFILES_PATH/$1/$2"
  local PPATH_DATA="$PPATH/data"
  local PPATH_EXTS="$PPATH/exts"
  /usr/bin/env code --max-memory 2048 --locale en-US --sync off --extensions-dir "$PPATH_EXTS" --user-data-dir "$PPATH_DATA"
}

cache_extensions() {
  local EXTENSIONS=()
  echo "Caching extensions"
  eval "$(curl -sfL "$API_URL" \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json;api-version=3.0-preview.1' \
    -d "$(jq --arg exts "$*" --arg flags $((0x0 | 0x2 | 0x200)) \
      ' setpath(["filters", 0, "criteria"]; $exts | split(" ") | map({ filterType: 7, "value": . }) + [{"filterType": 8, "value": "Microsoft.VisualStudio.Code"}])
      | setpath(["assetTypes"]; ["Microsoft.VisualStudio.Services.VSIXPackage"])
      | setpath(["flags"]; $flags|tonumber)' \
      <<<'{}')" |
    jq -r '@sh "EXTENSIONS=(\(.results[0].extensions | map({
        "name": (.publisher.publisherName + "." + .extensionName),
        "version": .versions[0].version,
        "url": .versions[0].files[0].source
      } | tostring)))"')"

  for ext in "${EXTENSIONS[@]}"; do
    local path=
    local name=
    local version=
    local url=
    eval "$(jq -r '@sh "name=\(.name)"' <<<"$ext")"
    eval "$(jq -r '@sh "version=\(.version)"' <<<"$ext")"
    eval "$(jq -r '@sh "url=\(.url)"' <<<"$ext")"
    path="cache/$name"

    if [[ ! -d "$path" ]]; then mkdir -p "$path"; fi
    echo -e "Downloading $Blue$name$RESET $Yellow$version$RESET"
    curl -# -C - -L "$url" -o "$path/$name.$version.vsix"
    echo "$version" >"$path/version"
  done
  echo "Finish caching"
}

install_extensions() {
  local PPATH="$PROFILES_PATH/$1/$2"
  local PPATH_DATA="$PPATH/data"
  local PPATH_EXTS="$PPATH/exts"
  shift 2

  echo -e "Installing $Magenta${#@}$RESET extensions"
  for e in "$@"; do
    if [[ -f "$CACHE_PATH/$e/version" ]] || [[ -f "$CACHE_PATH/$e/$e.$(cat "$CACHE_PATH/$e/version").vsix" ]]; then
      /usr/bin/env code --extensions-dir "$PPATH_EXTS" --user-data-dir "$PPATH_DATA" --install-extension "$CACHE_PATH/$e/$e.$(cat "$CACHE_PATH/$e/version").vsix" &>/dev/null
      echo -e "Extension $Blue$e$RESET $Yellow$(cat "$CACHE_PATH/$e/version")$RESET installed"
    fi
  done

  echo "Finish extensions installation"
}

disable_extension() {
  local PPATH="$PROFILES_PATH/$1/$2"
  local PPATH_DATA="$PPATH/data"
  local PPATH_EXTS="$PPATH/exts"
  /usr/bin/env code --extensions-dir "$PPATH_EXTS" --user-data-dir "$PPATH_DATA" --disable-extension "$3"
}

select_category() {
  PS3='Select category: '
  select opt in "${CATEGORIES[@]}"; do
    case $opt in
    *)
      if [[ -n "$opt" ]]; then
        echo "$opt"
        return
      fi
      ;;
    esac
  done
  PS3=
}

select_profile() {
  PS3='Select profile: '
  local options=()
  for p in "$PROFILES_PATH/$1"/*; do
    options+=("$(basename "$p")")
  done

  select opt in "${options[@]}"; do
    case $opt in
    *)
      if [[ -n "$opt" ]]; then
        echo "$opt"
        return
      fi
      ;;
    esac
  done
  PS3=
}

read_name() {
  local NAME=
  read -p "Enter name: " -r NAME
  echo "$NAME"
}

read_category() {
  local NAME=
  read -p "Enter category: " -r NAME
  echo "$NAME"
}

print_category_profiles() {
  echo -e "$Blue$1$RESET profiles":
  local values=("$PROFILES_PATH/$1"/*)
  for p in "${values[@]}"; do
    echo -n -e "$Yellow"
    if [[ "$p" == "${values[-1]}" ]]; then
      printf ' └ '
    elif [[ "$p" == "${values[0]}" ]]; then
      printf ' ┌ '
    else
      printf ' ├ '
    fi
    echo -n -e "$RESET"
    basename "$p"
  done
}

new() {
  local CATEGORY=
  local NAME=

  while true; do
    if [[ -z "$1" ]]; then
      break
    fi

    case "$1" in
    -h | --help)
      echo -e "Visual Studio Code Profile Manager ${Yellow}$VERSION$RESET"
      echo
      new_usage
      return
      ;;
    -c | --category)
      if [[ "$2" == -* ]]; then
        shift
      else
        if [[ "${CATEGORIES[*]}" =~ $2 ]]; then
          CATEGORY="$2"
        fi
        shift 2
      fi
      ;;
    *)
      if [[ "$1" != -* ]] && [[ -z "$NAME" ]]; then
        NAME="$1"
        shift
      else
        shift
        if [[ "$1" != -* ]] && [[ -n "$NAME" ]]; then
          shift
        fi
      fi
      ;;
    esac
  done

  if [[ -z "$CATEGORY" ]]; then
    CATEGORY=$(select_category)
  fi

  if [[ -z "$NAME" ]]; then
    NAME=$(read_name)
  fi

  local PPATH="$PROFILES_PATH/$CATEGORY/$NAME"
  local PPATH_DATA="$PPATH/data"
  local PPATH_EXTS="$PPATH/exts"

  mkdir -p "$PPATH"
  mkdir -p "$PPATH_DATA"
  mkdir -p "$PPATH_EXTS"

  local EXTENSIONS=("${BASE_EXTENSIONS[@]}" "${BASE_PROJECT_EXTENSIONS[@]}")
  local TO_CACHE=()

  for ext in "${EXTENSIONS[@]}"; do
    if [[ ! -f "$CACHE_PATH/$ext/version" ]] || [[ ! -f "$CACHE_PATH/$ext/$ext.$(cat "$CACHE_PATH/$ext/version").vsix" ]]; then
      TO_CACHE+=("$ext")
    fi
  done

  if [[ -n "${TO_CACHE[*]}" ]]; then
    cache_extensions "${TO_CACHE[@]}"
  fi

  if [[ -n "${EXTENSIONS[*]}" ]]; then
    install_extensions "$CATEGORY" "$NAME" "${EXTENSIONS[@]}"
  fi
}

remove() {
  local CATEGORY=
  local NAME=

  while true; do
    if [[ -z "$1" ]]; then
      break
    fi

    case "$1" in
    -h | --help)
      echo -e "Visual Studio Code Profile Manager $Yellow$VERSION$RESET"
      echo
      remove_usage
      return
      ;;
    -c | --category)
      if [[ "$2" == -* ]]; then
        shift
      else
        if [[ "${CATEGORIES[*]}" =~ $2 ]]; then
          CATEGORY="$2"
        fi
        shift 2
      fi
      ;;
    *)
      if [[ "$1" != -* ]] && [[ -z "$NAME" ]]; then
        NAME="$1"
        shift
      else
        shift
        if [[ "$1" != -* ]] && [[ -n "$NAME" ]]; then
          shift
        fi
      fi
      ;;
    esac
  done

  if [[ -z "$CATEGORY" ]]; then
    CATEGORY=$(select_category)
  fi

  if [[ -z "$NAME" ]]; then
    NAME=$(select_profile "$CATEGORY")
  fi

  local PPATH="$PROFILES_PATH/$CATEGORY/$NAME"
  rm -rf "$PPATH"
}

list() {
  local CATEGORY=

  while true; do
    if [[ -z "$1" ]]; then
      break
    fi

    case "$1" in
    -h | --help)
      echo -e "Visual Studio Code Profile Manager ${Yellow}$VERSION$RESET"
      echo
      list_usage
      return
      ;;
    -c | --category)
      if [[ "$2" == -* ]]; then
        shift
      else
        if [[ "${CATEGORIES[*]}" =~ $2 ]]; then
          CATEGORY="$2"
        fi
        shift 2
      fi
      ;;
    *) shift ;;
    esac
  done

  if [[ -n "$CATEGORY" ]]; then
    if [[ ! -d "$PROFILES_PATH/$CATEGORY" ]] || [[ ! "$(ls -A "$PROFILES_PATH/$CATEGORY")" ]]; then return; fi
    print_category_profiles "$CATEGORY"
  else
    local values=("$PROFILES_PATH"/*)
    if [[ -z "$(ls -A "$PROFILES_PATH")" ]]; then return; fi
    for c in "${values[@]}"; do
      if [[ ! -d "$PROFILES_PATH/$(basename "$c")" ]] || [[ ! "$(ls -A "$PROFILES_PATH/$(basename "$c")")" ]]; then continue; fi
      print_category_profiles "$(basename "$c")"
      if [[ "$c" != "${values[-1]}" ]]; then
        echo
      fi
    done
  fi
}

main() {
  local PROJECT=false
  local TARGET_PATH=
  local CATEGORY=
  local NAME=

  while true; do
    if [[ -z "$1" ]]; then
      break
    fi

    case "$1" in
    -h | --help)
      usage
      return
      ;;
    -v | --version)
      echo "$VERSION"
      return
      ;;
    -p | --project)
      PROJECT=true
      shift
      ;;
    -c | --category)
      if [[ "${CATEGORIES[*]}" =~ $2 ]]; then
        CATEGORY="$2"
      fi
      shift 2
      ;;
    -n | --name)
      NAME="$2"
      shift 2
      ;;
    *)
      if [[ "$1" != -* ]] && [[ -z "$TARGET_PATH" ]]; then
        TARGET_PATH="$1"
        shift
      else
        shift
        if [[ "$1" != -* ]] && [[ -n "$TARGET_PATH" ]]; then
          shift
        fi
      fi
      ;;
    esac
  done

  if [[ -z "$CATEGORY" ]]; then
    CATEGORY=$(select_category)
  fi

  if [[ -z "$NAME" ]]; then
    NAME=$(select_profile "$CATEGORY")
  fi

  if [[ ! -d "$PROFILES_PATH/$CATEGORY/$NAME" ]]; then
    echo -e "Profile $Magenta$NAME$RESET does not exist in category $Magenta$CATEGORY$RESET"
    exit 1
  fi

  code "$CATEGORY" "$NAME"
}

setup() {
  EXTS=()
  which jq >/dev/null || EXTS+=("jq")
  if [[ -n "${EXTS[*]}" ]]; then
    case "$TARGET" in
    darwin) brew install "${EXTS[*]}" ;;
    debian) apt install "${EXTS[*]}" ;;
    archlinux) pacman -S "${EXTS[*]}" ;;
    *) echo -e "Please install ${Green}jq$RESET manually" ;;
    esac
  fi

  local DEFAULT_BASE_EXTENSIONS=(
    "teabyii.ayu"
    "aaron-bond.better-comments"
    "usernamehw.errorlens"
    "mkxml.vscode-filesize"
    "miguelsolorio.fluent-icons"
    "christian-kohler.path-intellisense"
    "miguelsolorio.symbols"
    "wayou.vscode-todo-highlight"
  )
  local DEFAULT_BASE_PROJECT_EXTENSIONS=(
    "mikestead.dotenv"
    "EditorConfig.EditorConfig"
    "ultram4rine.vscode-choosealicense"
    "donjayamanne.githistory"
    "codezombiech.gitignore"
    "eamodio.gitlens"
    "yzhang.markdown-all-in-one"
    "bierner.markdown-mermaid"
    "DavidAnson.vscode-markdownlint"
    "jock.svg"
    "SimonSiefke.svg-preview"
  )

  if [[ ! -d "$BASE_PATH" ]]; then mkdir -p "$BASE_PATH"; fi
  if [[ ! -d "$PROFILES_PATH" ]]; then mkdir -p "$PROFILES_PATH"; fi
  if [[ ! -d "$CACHE_PATH" ]]; then mkdir -p "$CACHE_PATH"; fi
  if [[ ! -f "$CONFIG_PATH" ]]; then echo "{}" >"$CONFIG_PATH"; fi
  jq --arg BASE_EXTENSIONS "${DEFAULT_BASE_EXTENSIONS[*]}" \
    'if (has("BASE_EXTENSIONS") | not) or (.BASE_EXTENSIONS | length == 0 )
     then setpath(["BASE_EXTENSIONS"]; $BASE_EXTENSIONS | split(" ")) 
     else . end' <"$CONFIG_PATH" >/tmp/settings.json && mv /tmp/settings.json "$CONFIG_PATH"

  jq --arg BASE_PROJECT_EXTENSIONS "${DEFAULT_BASE_PROJECT_EXTENSIONS[*]}" \
    'if (has("BASE_PROJECT_EXTENSIONS") | not) or (.BASE_PROJECT_EXTENSIONS | length == 0 )
     then setpath(["BASE_PROJECT_EXTENSIONS"]; $BASE_PROJECT_EXTENSIONS | split(" ")) 
     else . end' <"$CONFIG_PATH" >/tmp/settings.json && mv /tmp/settings.json "$CONFIG_PATH"

}

category() {
  CATEGORY=$2
  NAME=$3
  case "$1" in
  n | new)
    if [[ -z "$CATEGORY" ]]; then
      CATEGORY=$(read_category)
    fi
    mkdir -p "$PROFILES_PATH/$CATEGORY"
    ;;
  u | update)
    if [[ -z "$CATEGORY" ]]; then
      CATEGORY=$(select_category)
    fi
    if [[ -z "$NAME" ]]; then
      NAME=$(read_category)
    fi
    mv "$PROFILES_PATH/$CATEGORY" "$PROFILES_PATH/$NAME"
    ;;
  r | remove)
    if [[ -z "$CATEGORY" ]]; then
      CATEGORY=$(select_category)
    fi
    rm -rf "$PROFILES_PATH/${CATEGORY:?}"
    ;;
  l | list)
    echo "${CATEGORIES[*]}"
    ;;
  -h | --help)
    echo -e "Visual Studio Code Profile Manager ${Yellow}$VERSION$RESET"
    echo
    category_usage
    ;;
  *)
    echo -e "Visual Studio Code Profile Manager ${Yellow}$VERSION$RESET"
    echo
    category_usage
    ;;
  esac
}

clear_cache() {
  FULL=${1-false}

  if [[ $FULL ]]; then
    rm -rf "$CACHE_PATH"
    mkdir -p "$CACHE_PATH"
  else
    echo "Unimplemented, FULL=$FULL"
  fi
}

install() {
  case "$TARGET" in
  darwin) sh -c "sudo install -o root -g wheel $0 /usr/local/bin/codepm" ;;
  *) echo "Please copy this script to any location in PATH" ;;
  esac
}

uninstall() {
  while true; do
    read -r -p "Do you wish to uninstall this program? (y/n) " yn
    case $yn in
    [Yy]*)
      if [[ -d "$BASE_PATH" ]]; then
        rm -rf "$BASE_PATH"
      fi
      if [[ -f "/usr/local/bin/codepm" ]]; then
        sh -c "sudo rm /usr/local/bin/codepm"
      fi
      echo "${Green}codepm$RESET was uninstalled"
      break
      ;;
    [Nn]*) exit ;;
    *) echo "Please answer yes or no." ;;
    esac
  done
}

# Ensure all dependencies are installed
if [[ "$1" != 's' ]] && [[ "$1" != 'setup' ]]; then
  which code >/dev/null || {
    echo -e "Please install ${Green}code$RESET manually or try with ${Green}codepm$RESET ${Blue}setup$RESET"
    exit 1
  }
  which jq >/dev/null || {
    echo -e "Please install ${Green}jq$RESET manually or try with ${Green}codepm$RESET ${Blue}setup$RESET"
    exit 1
  }

  read -ra CATEGORIES <<<"$(find "$PROFILES_PATH" -type d -depth 1 | xargs basename -a | xargs)"

  eval "$(jq -r '@sh "BASE_EXTENSIONS=(\(.BASE_EXTENSIONS))"' <"$CONFIG_PATH")"
  if [[ "${BASE_EXTENSIONS[*]}" == "null" ]]; then BASE_EXTENSIONS=(); fi

  eval "$(jq -r '@sh "BASE_PROJECT_EXTENSIONS=(\(.BASE_PROJECT_EXTENSIONS))"' <"$CONFIG_PATH")"
  if [[ "${BASE_PROJECT_EXTENSIONS[*]}" == "null" ]]; then BASE_PROJECT_EXTENSIONS=(); fi
fi

case $(uname) in
'Darwin') TARGET=darwin ;;
'Linux')
  which apt && TARGET=debian
  which pacman && TARGET=archlinux
  ;;
esac

if [[ -z "$1" ]]; then
  usage
  exit 0
fi

case "$1" in
n | new)
  shift
  new "$@"
  ;;
r | remove)
  shift
  remove "$@"
  ;;
l | list)
  shift
  list "$@"
  ;;
s | setup) setup ;;
c | category)
  shift
  category "$@"
  ;;
cc | clear-cache) clear_cache ;;
ccf | clear-cache-full) clear_cache true ;;
i | install) install ;;
ui | uninstall) uninstall ;;
*) main "$@" ;;
esac
